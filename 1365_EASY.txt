# 1365. How Many Numbers Are Smaller Than the Current Number
# Given the array nums, for each nums[i] find out how many numbers in the array are smaller than it. 
# That is, for each nums[i] you have to count the number of valid j's such that j != i and nums[j] < nums[i].
# Return the answer in an array.

# my solution
class Solution:
    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:
        hash_dict = dict()
        sort_nums = sorted(nums, reverse = True)
        for i in sort_nums:
            if i not in hash_dict.keys():
                hash_dict[i] = 0
                for key in hash_dict.keys():
                    if key < i:
                        hash_dict[i] = hash_dict[i] + 1
                    elif key > i:
                        hash_dict[key] = hash_dict[key] + 1
            elif i in hash_dict.keys():
                for key in hash_dict.keys():
                    if key > i:
                        hash_dict[key] = hash_dict[key] + 1

        for i in range(len(nums)):
            nums[i] = hash_dict[nums[i]]
        
        return nums

# better solution
class Solution:
    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:
        indices = {}
        for idx, num in enumerate(sorted(nums)):
            indices.setdefault(num, idx)
        return [indices[num] for num in nums]

# modified solution
class Solution:
    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:
	# if [7, 7, 7, 7], return [0, 0, 0, 0]
	if len(set(nums)) == 1:
		return [0 for i in range(len(nums)]
	else:
        	indices = {}
        	for idx, num in enumerate(sorted(nums)):
            		indices.setdefault(num, idx)
        	return [indices[num] for num in nums]
